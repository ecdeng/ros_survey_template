<!DOCTYPE html>
<html>
  <head>
    <title>{{ title }}</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
<script type="text/javascript" src="http://cdn.robotwebtools.org/EventEmitter2/current/eventemitter2.js"></script>
<script type="text/javascript" src="http://cdn.robotwebtools.org/roslibjs/current/roslib.js"></script>

<script type="text/javascript" type="text/javascript">
  
  var ros = new ROSLIB.Ros({ //connects to rosbridge server allows to interface with web browsers
    url : '//localhost:9090'
  });

  var fibonacciClient = new ROSLIB.ActionClient({
    ros : ros,
    serverName : '/fibonacci',
    actionName : 'actionlib_tutorials/FibonacciAction'
  });

  var goal = new ROSLIB.Goal({ //actionlib goal to send server
    actionClient : fibonacciClient,
    goalMessage : {
      order : 7 //length of fic sequence to compute
    }
  });

  goal.on('feedback', function(feedback) { //feedback updates while reaching goal
    console.log('Feedback: ' + feedback.sequence);
  });

  goal.on('result', function(result) { // The result of the goal
    console.log('Final Result: ' + result.sequence);
  });

  ros.on('connection', function() { // This adds a listener for a connection event to the ros object
    console.log('Connected to websocket server.');
  });

  ros.on('error', function(error) {
    console.log('Error connecting to websocket server: ', error);
  });

  ros.on('close', function() {
    console.log('Connection to websocket server closed.');
  });

  goal.send(); //send goal to the actionlib server

</script>
<!-- 
    <script type="text/javascript" src="http://cdn.robotwebtools.org/EventEmitter2/current/eventemitter2.js"></script>
    <script type="text/javascript" src="http://cdn.robotwebtools.org/roslibjs/current/roslib.js"></script>

  <script type ="text/javascript" type="text/javascript">
    var ros = new ROSLIB.Ros({
      url : 'ws://localhost:9090'
    });

    ros.on('connection', function(){
      console.log('Connected to websocket server.');
    });
    ros.on('error', function(error){
      console.log('Error connecting to websocket server: ', error);
    });
    ros.on('close', function(){
      console.log('Connection to websocket server closed');
    });

    //publishing a topic

    var cmdVel = new ROSLIB.Topic({
      ros: ros,
      name : '/cmd_cel',
      messageType : 'geometry_msgs/Twist'
    });

    var twist = new ROSLIB.Message({
      linear: {
        x : 0.1,
        y : 0.2,
        z : 0.3
      },
      angular : {
        x : -0.1,
        y : -0.2,
        z : -0.3
      }
    });

    cmdVel.publish(twist);

    //subscribing to a topic

    var listener = new ROSLIB.Topic({
      ros : ros,
      name : '/listener',
      messageType : 'std_msgs/String'
    });

    listerner.subscribe(function(message){
      console.log('Received message on ' + listener.name + ': ' + message.data);
      listener.unsubscribe();
    });
  // Calling a service
  // -----------------

  var addTwoIntsClient = new ROSLIB.Service({
    ros : ros,
    name : '/add_two_ints',
    serviceType : 'rospy_tutorials/AddTwoInts'
  });

  var request = new ROSLIB.ServiceRequest({
    a : 1,
    b : 2
  });

  addTwoIntsClient.callService(request, function(result) {
    console.log('Result for service call on '
      + addTwoIntsClient.name
      + ': '
      + result.sum);
  });

  // Getting and setting a param value
  // ---------------------------------

  ros.getParams(function(params) {
    console.log(params);
  });

  var maxVelX = new ROSLIB.Param({
    ros : ros,
    name : 'max_vel_y'
  });

  maxVelX.set(0.8);
  maxVelX.get(function(value) {
    console.log('MAX VAL: ' + value);
  });
  </script> -->
  </head>
  <body>
    <h1>{{ title }}</h1>
    <p>Welcome to {{ des }}</p>

    <ul>
      {{#data}} name: {{ name }} {{/data}}</li>
    </ul>

 <!-- CREATE Operation -->
<!-- 	<form action="/quotes" method="post">
	  <input type="text" placeholder="name" name="name"> -->
<!-- 	  <input type="text" placeholder="quote" name="quote"> -->
<!-- 	  <button type="submit">Submit</button>
	</form> -->
  </body>
</html>
